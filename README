= Description
  This library provides analogues of the :getpriority, :setpriority, :getrlimit,
  and :setrlimit methods for MS Windows. It also adds the new methods :job?,
  :get_affinity, and :create.
 
= Prerequisites
  * ffi
  * sys-proctable (dev only)
  * test-unit 2 (dev only)

= Supported Platforms
  This library is supported on Windows 2000 or later.

= Installation
  gem install win32-process

= Synopsis
  require 'win32/process'

  p Process.job? # => true or false

  info = Process.create(
    :app_name         => "notepad.exe",
    :creation_flags   => Process::DETACHED_PROCESS,
    :process_inherit  => false,
    :thread_inherit   => true,
    :cwd              => "C:\\"
  )

  p info.process_id
	
= Developer's Notes
== Removal of Process.fork in release 0.7.0
   The Process.fork method was originally experimental but it has never
   been particularly useful in practice. On top of that, it required special
   implementations of the Process.waitXXX methods, so it was a maintenance
   issue as well.
   
   With Ruby 1.9 now becoming standard and its addition of Process.spawn
   and friends (and concommitant support for the Process.waitXXX methods) I
   felt it was time to remove it.

   You can still simulate Process.fork if you like using Process.create, which
   is how it was implemented internally anyway. A better solution might be
   to follow in the footsteps of ActiveState Perl, which uses native threads
   to simulate fork on Windows.
	
== The removal of the custom Process.kill method
   We added the Process.kill method originally because it wasn't supported
   at all back in the bad old Ruby 1.6 days. It was added in Ruby 1.8, but
   the implementation was (and still is) not particularly good.

   The problem is that there is no nice way to kill a process on Windows
   with Ruby, i.e. exit handlers are bypassed in the same manner as a
   "kill -9" on Unix systems. We decided to implement a nicer way to kill
   processes when not using signal 9 that would still allow processes to
   perform cleanup before terminating.

   However, we also implemented slightly different semantics for how multiple
   pids are handled if the kill attempt on any one of them fails. Originally
   I wanted the MRI core team to adopt our approach, but that never happened
   and now I worry about compatibility issues. On top of that I really think
   this is something that ought to be fixed in core Ruby, so I've decided to
   remove this crutch and try to force the issue.

== The removal of the custom Process.ppid method
   This was added at some point in the Ruby 1.9 dev cycle so it was removed
   from this library.

= Known Bugs	
  None known. Any bugs should be reported on the project page at
  https://github.com/djberg96/win32-process.
	
= License
  Artistic 2.0
	
= Copyright
  (C) 2003-2012 Daniel J. Berger
  All Rights Reserved
		
= Warranty
  This library is provided "as is" and without any express or
  implied warranties, including, without limitation, the implied
  warranties of merchantability and fitness for a particular purpose.
	
= Author(s)
  Park Heesob	
  Daniel J. Berger
